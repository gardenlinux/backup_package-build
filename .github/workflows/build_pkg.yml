name: build
on:
  workflow_call:
    inputs:
      ref:
        type: string
        default: main
      build_container:
        type: string
        default: ghcr.io/gardenlinux/package-build
      build_options:
        type: string
        default: ""
      build_profiles:
        type: string
        default: ""
      build_dependencies:
          type: string
          default: ""
      source:
        type: string
        default: ""
      debian_source:
        type: string
        default: ""
      email:
        type: string
        default: ""
      maintainer:
        type: string
        default: ""
      distribution:
        type: string
        default: ""
      message:
        type: string
        default: ""
      git_filter:
        type: string
        default: ""
      git_tag_match:
        type: string
        default: ""
jobs:
  source:
    name: source package
    outputs:
      pkg: ${{ steps.build.outputs.pkg }}
      source_name: ${{ steps.build.outputs.source_name }}
      source_version: ${{ steps.build.outputs.source_version }}
      build_options: ${{ steps.build.outputs.build_options }}
      build_profiles: ${{ steps.build.outputs.build_profiles }}
      release: ${{ steps.release.outputs.release }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          repository: gardenlinux/package-build
          ref: ${{ inputs.ref }}
      - run: mkdir input output
      - uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}
          ref: ${{ github.sha }}
          path: input
          fetch-tags: true
          fetch-depth: 0
      - name: pull build container
        run: podman pull "${{ inputs.build_container }}:amd64"
      - name: fetch dependencies
        run: |
          mkdir _pkgs
          while IFS=@ read -r repo reference; do
            ./scripts/gh_release "${{ github.token }}" "$repo" list "$reference" | grep '\.deb$' | while read -r url; do
              (cd _pkgs && wget "$url")
            done
          done <<< '${{ inputs.build_dependencies }}'
          ls -lah _pkgs
          (cd _pkgs && dpkg-scanpackages --multiversion . > Packages)
          cat _pkgs/Packages
      - name: build
        id: build
        env:
          GITHUB_REF_TYPE: ${{ github.ref_type }}
          GITHUB_REF_NAME: ${{ github.ref_name }}
        run: |
          version=""
          [ "$GITHUB_REF_TYPE" == "tag" ] && version=${GITHUB_REF_NAME#*/}
          pkg="$(podman run \
               --rm \
               --mount="type=bind,src=$PWD/${GITHUB_ACTION_PATH}/container/bin,dst=/usr/local/sbin,ro" \
               -e PACKAGE_VERSION="$version" \
               -v "$PWD/input:/input" \
               -v "$PWD/output:/output" \
               -v "$PWD/_pkgs:/pkgs" \
               "${{ inputs.build_container }}:amd64" build_source
          )"
          echo "pkg=$pkg" | tee -a "$GITHUB_OUTPUT"
          echo "build_options=$(cat output/.build_options)" | tee -a "$GITHUB_OUTPUT"
          echo "build_profiles=$(cat output/.build_profiles)" | tee -a "$GITHUB_OUTPUT"
          echo "source_name=$(cat output/.source_name)" | tee -a "$GITHUB_OUTPUT"
          echo "source_version=$(cat output/.source_version)" | tee -a "$GITHUB_OUTPUT"
      - name: upload source packages
        uses: actions/upload-artifact@v3
        with:
          name: source
          path: |
            output/
            !output/.*
          retention-days: 7
  packages:
    name: ${{ matrix.target == 'indep' && 'architecture independent packages' || format('{0} binary packages', matrix.arch) }}
    needs: source
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [ indep, archdep ]
        arch: [ amd64, arm64v8 ]
        exclude:
          - target: indep
            arch: arm64v8
    steps:
      - uses: actions/checkout@v4
        with:
          repository: gardenlinux/package-build
          ref: ${{ inputs.ref }}
      - name: setup binfmt
        if: ${{ matrix.arch == 'arm64v8' }}
        run: sudo podman run --privileged ghcr.io/gardenlinux/binfmt_container
      - name: pull build container
        run: podman pull "${{ inputs.build_container }}:${{ matrix.arch }}"
      - name: get source packages
        uses: actions/download-artifact@v3
        with:
          name: source
          path: input/
      - name: prepare source package for build
        run: |
          cd input/
          echo "${{ needs.source.outputs.build_options }}" > .build_options
          echo "${{ needs.source.outputs.build_profiles}}" > .build_profiles
          ln -s "${{ needs.source.outputs.pkg }}.dsc" .source
      - name: fetch dependencies
        run: |
          mkdir _pkgs
          while IFS=@ read -r repo reference; do
            ./scripts/gh_release "${{ github.token }}" "$repo" list "$reference" | grep '\.deb$' | while read -r url; do
              (cd _pkgs && wget "$url")
            done
          done <<< '${{ inputs.build_dependencies }}'
          ls -lah _pkgs
          (cd _pkgs && dpkg-scanpackages --multiversion . > Packages)
          cat _pkgs/Packages
      - name: build
        id: build
        run: |
          mkdir output
          pkg="$(podman run \
               --rm \
               --mount="type=bind,src=$PWD/${GITHUB_ACTION_PATH}/container/bin,dst=/usr/local/sbin,ro" \
               -v "$PWD/input:/input" \
               -v "$PWD/output:/output" \
               -v "$PWD/_pkgs:/pkgs" \
               "${{ inputs.build_container }}:${{ matrix.arch }}" \
               "build_${{ matrix.target }}"
          )"
          echo "pkg=$pkg" | tee -a "$GITHUB_OUTPUT"
      - name: upload binary packages
        uses: actions/upload-artifact@v3
        with:
          name: binary
          path: |
            output/
            !output/.*
          retention-days: 7
  publish:
    needs: [ source, packages ]
    # Only publish packages, if the build has been triggered by a Git Tag (e.g gardenlinux/1.0.0gardenlinux1)
    # or if the build package contains the gardenlinux0 suffix which it will get if there has not been a
    # version released already for the given upstream version. Then, the pipeline automatically assignes this package
    # to the gardenlinux0 release of the package.
    if: |
      contains(github.ref, format('refs/tags/gardenlinux/{0}', needs.source.outputs.source_version)) ||
      endsWith(needs.source.outputs.source_version, 'gardenlinux0')
    env:
      RELEASE_GIT_TAG: ${{ format('gardenlinux/{0}', needs.source.outputs.source_version) }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          repository: gardenlinux/package-build
          ref: ${{ inputs.ref }}
      - name: check if ${{ env.pkg }} already released
        id: check
        run: |
          if ./scripts/gh_release "${{ github.token }}" "${{ github.repository }}" exists "${{ needs.source.outputs.pkg }}"; then
            echo "skip_release=true" | tee "$GITHUB_OUTPUT"
          else
            echo "skip_release=false" | tee "$GITHUB_OUTPUT"
          fi
      - name: download source packages
        if: ${{ steps.check.outputs.skip_release != 'true' }}
        uses: actions/download-artifact@v3
        with:
          name: source
          path: output/
      - name: download binary packages
        if: ${{ steps.check.outputs.skip_release != 'true' }}
        uses: actions/download-artifact@v3
        with:
          name: binary
          path: output/
      - name: draft release and upload packages
        id: release
        if: ${{ steps.check.outputs.skip_release != 'true' }}
        run: |
          release="$(./scripts/gh_release "${{ github.token }}" "${{ github.repository }}" create --draft "$RELEASE_GIT_TAG" "${{ github.sha }}" "${{ needs.source.outputs.pkg }}")"
          for f in output/*; do
            ./scripts/gh_release "${{ github.token }}" "${{ github.repository }}" upload "$release" "$f"
          done
          echo "release=$release" | tee "$GITHUB_OUTPUT"
      - name: publish drafted release
        if: ${{ steps.check.outputs.skip_release != 'true' }}
        run: ./scripts/gh_release "${{ github.token }}" "${{ github.repository }}" publish_draft "${{ steps.release.outputs.release }}"
  cleanup:
    needs: [ source, packages ]
    if: ${{ always() && contains(needs.*.result, 'failure') }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          repository: gardenlinux/package-build
      - name: delete drafted release
        run: ./scripts/gh_release "${{ github.token }}" "${{ github.repository }}" delete "${{ needs.source.outputs.release }}"
