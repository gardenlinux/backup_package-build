#!/usr/bin/env bash

set -exuo pipefail

exec 3>&1
exec 1>&2

main() (
	DEB_BUILD_OPTIONS="terse $BUILD_OPTIONS"
	export DEB_BUILD_OPTIONS

	source="$SOURCE_NAME"
	debian_source="$DEBIAN_SOURCE"

	if [[ "$source" = "git+"* ]]; then
		git_source "${source#git+}"
	else
		apt_source "$source"
	fi

	# if debian_source defined: remove debian folder from source and replace with debian folder from debian_source
	if [ -n "$debian_source" ]; then
		mkdir debian_src
		cd debian_src
		if [[ "$debian_source" = "git+"* ]]; then
			git_source "${debian_source#git+}"
		else
			apt_source "$debian_source"
		fi
		rm -rf ../src/debian
		mv src/debian ../src/
		cd ..
		rm -rf debian_src
	fi

	cd src
	apply_patches /input

	pkg="$(dpkg-parsechangelog --show-field Source)"
	version="$(dpkg-parsechangelog --show-field Version)"
	version_orig="${version%-*}"
	xz < ../orig.tar > "../${pkg}_${version_orig}.orig.tar.xz"
	rm ../orig.tar
	
	dpkg-source --build .

	cd ..
	rm -rf src
	ls -lah

	echo "$DEB_BUILD_OPTIONS" > .build_options
	ln -s "${pkg}_${version}.dsc" .source

	if [ -d "/output" ]; then
		{ echo .build_options; echo .source; echo "${pkg}_${version}.dsc"; get_files < "${pkg}_${version}.dsc"; } | while read file; do
			sudo cp -d "$file" "/output/$file"
		done
	fi

	echo "${pkg}_${version}" >&3
)

apt_source() (
	apt-get source --only-source --download-only "$1"
	orig=(*.orig.tar.*)
	debian=(*.debian.tar.*)
	dsc=(*.dsc)
	auto_decompress "$orig" > orig.tar
	mkdir src
	tar -C src -x --strip-components 1 < orig.tar
	auto_decompress "$debian" | tar -C src -xv
	rm "$orig" "$debian" "$dsc"
)

git_source() (
	IFS='#' read -r url ref <<< "$1"
	git clone --bare --branch "$ref" --depth 1 "$url" src.git
	GIT_DIR=src.git git archive --prefix src/ "$ref" > orig.tar
	rm -rf src.git
	tar -x < orig.tar
)

auto_decompress() (
	case "${1##*.}" in
		gz)
			gzip -d < "$1"
			;;
		xz)
			xz -d < "$1"
			;;
		*)
			exit 1
			;;
	esac
)

apply_patches() (
	if [ -x "$1/exec.pre" ]; then
		SOURCE="$source" "$1/exec.pre"
	fi

	if [ -f "$1/patches/series" ]; then
		while read -r patch; do
			patch -p1 < "$1/patches/$patch"
		done < "$1/patches/series"
	fi

	version="$SOURCE_VERSION"
	[ -n "$version" ] || version="$(dpkg-parsechangelog --show-field Version)"
	email="$EMAIL"
	name="$NAME"
	distribution="$DIST"
	version_suffix="$VERSION_SUFFIX"
	message="$MESSAGE"

	DEBEMAIL="$email" DEBFULLNAME="$name" dch --newversion "$version$version_suffix" --distribution "$distribution" --force-distribution -- "$message"

	if [ -x "$1/exec.post" ]; then
		SOURCE="$source" "$1/exec.post"
	fi
)

get_files() (
	awk '!/^ / { flag=0 } flag { print $NF } /^Files:/ { flag=1 }'
)

main "$@"
