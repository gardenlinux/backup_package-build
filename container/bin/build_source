#!/usr/bin/env bash

set -exuo pipefail

exec 3>&1
exec 1>&2

# Default variables for build packages
email="contact@gardenlinux.io"
maintainer="Garden Linux Builder"
distribution=gardenlinux
message="Rebuild for Garden Linux."
debian_source=""
inputs_file="/input/.github/workflows/build.yml"

main() (
	# Init some variables
	name="$(yq -r '.name' < "$inputs_file")"
	source="$(yq -r '.jobs.build_pkg.with.source // "'$name'"' < "$inputs_file")"
	debian_source="$(yq -r '.jobs.build_pkg.with.debian_source // "'$debian_source'"' < "$inputs_file")"
	build_options="terse $(yq -r '.jobs.build_pkg.with.build_options // ""' < "$inputs_file")"
	build_profiles="$(yq -r '.jobs.build_pkg.with.build_profiles // ""' < "$inputs_file")"
	git_filter="$(yq -r '.jobs.build_pkg.with.git_filter // ".*"' < "$inputs_file")"
	git_tag_match="$(yq -r '.jobs.build_pkg.with.git_tag_match // "(.*)"' < "$inputs_file")"

	# Define Build Options
	export DEB_BUILD_OPTIONS="$build_options"
	export DEB_BUILD_PROFILES="$build_profiles"

	# Set permissions
	git -C /input config --global --add safe.directory '*'

	# Get sources for building source package
	# out of it
	get_sources $source

	# Is the debian_source parameter specified?
	# If yes, replace the original debian/ directory
	# with the one provided via debian_source.
	if [ -n "$debian_source" ]; then
		mkdir debian_src
		cd debian_src
		get_sources $debian_source
		rm -rf ../src/debian
		mv src/debian ../src/
		cd ..
		rm -rf debian_src
	fi

	# Start preparing and building the source package
	cd src
	apply_patches /input

	pkg="$(dpkg-parsechangelog --show-field Source)"
	version="$(dpkg-parsechangelog --show-field Version)"
	version_orig="${version%-*}"
	if [ -f ../orig.tar ]; then
		xz < ../orig.tar > "../${pkg}_${version_orig}.orig.tar.xz"
		rm ../orig.tar
	fi
	
	dpkg-source --build .
	cd ..

	# Do some cleanup afterwards
	rm -rf src
	ls -lah

	# Add some meta files next to the created artifacts
	echo "$DEB_BUILD_OPTIONS" > .build_options
	echo "$DEB_BUILD_PROFILES" > .build_profiles
	echo "${pkg}" > .source_name
	echo "${version}" > .source_version
	ln -s "${pkg}_${version}.dsc" .source

	# Copy all artifacts to the dedicated output directory
	if [ -d "/output" ]; then
		{ echo .build_options; echo .build_profiles; echo .source_name; echo .source_version; echo .source; echo "${pkg}_${version}.dsc"; get_files < "${pkg}_${version}.dsc"; } | while read file; do
			sudo cp -d "$file" "/output/$file"
		done
	fi

	# Finally, print the package name and version
	echo "${pkg}_${version}" >&3
)

apt_source() (
	apt-get source -o APT::Default-Release="testing" --only-source --download-only "$1"
	orig=(*.orig.tar.*)
	debian=(*.debian.tar.*)
	dsc=(*.dsc)
	dpkg-source --extract "$dsc" src
	if [ -f "$orig" ]; then
		auto_decompress "$orig" > orig.tar
		rm $orig
	else
		rm *.tar.*
	fi
	if [ -f $debian ]; then
		rm "$debian"
	fi
	rm "$dsc"
)

git_source() (
	IFS='#' read -r url ref <<< "$1"
	git clone "$url" src.git
	git -C src.git archive --prefix src/ "$(get_git_tag)" > orig.tar
	rm -rf src.git
	tar -x < orig.tar
)

native_source() (
	echo "Native package build."
	cp -r /input src
)

auto_decompress() (
	case "${1##*.}" in
		gz)
			gzip -d < "$1"
			;;
		xz)
			xz -d < "$1"
			;;
		*)
			exit 1
			;;
	esac
)

apply_patches() (
	if [ -x "$1/exec.pre" ]; then
		SOURCE="$source" "$1/exec.pre"
	fi

	if [ -f "$1/patches/series" ]; then
		while read -r patch; do
			patch -p1 < "$1/patches/$patch"
		done < "$1/patches/series"
	fi

	name="$(yq -r '.name' < "$inputs_file")"
	email="$(yq -r '.jobs.build_pkg.with.email // "'"$email"'"' < "$inputs_file")"
	maintainer="$(yq -r '.jobs.build_pkg.with.maintainer // "'"$maintainer"'"' < "$inputs_file")"
	distribution="$(yq -r '.jobs.build_pkg.with.distribution // "'"$distribution"'"' < "$inputs_file")"
	message="$(yq -r '.jobs.build_pkg.with.message // "'"$message"'"' < "$inputs_file")"

	if [ -f debian/changelog ]; then
		DEBEMAIL="$email" DEBFULLNAME="$maintainer" dch \
		--newversion "$(get_version)" --distribution "$distribution" \
		--force-distribution -- "$message"
	else
		DEBEMAIL="$email" DEBFULLNAME="$maintainer" EDITOR=true dch --create --package $name \
                --newversion "$(get_version)" --distribution "$distribution" \
                --force-distribution -- "$message"
	fi

	if [ -x "$1/exec.post" ]; then
		SOURCE="$source" "$1/exec.post"
	fi
)

get_sources() (
	local source_type=$1

	# What kind of source type do we have?
	if [[ "$source_type" = "git+"* ]]; then
		git_source "${source#git+}"
	elif [[ "$source_type" = "native" ]]; then
		native_source
	else
		apt_source "$source_type"
	fi
)

get_git_tag() (
	local tag
	if [ -z $PACKAGE_VERSION ]; then
		tag=$(get_latest_git_tag)
	else
		tag=$(get_git_tag_by_version ${PACKAGE_VERSION%-0gardenlinux*})
	fi
	echo $tag
)

get_latest_git_tag() (
	local latest_tag

	IFS='#' read -r url ref <<< "${source#git+}"
	latest_tag="$(git ls-remote --tags --refs $url | sed "s#.*\/##" | grep -E "$git_filter" | sort -V | tail -n1)"

	echo $latest_tag
)

get_version_by_git_tag() (
	local version tag
	tag=$1

	version=$(echo $tag | sed -E "s#$git_tag_match#\1#")
	echo $version
)

get_git_tag_by_version() (
	local tag tags version
	version=$1

	IFS='#' read -r url ref <<< "${source#git+}"
	tags=$(git ls-remote --tags --refs $url | sed "s#.*\/##" | grep -E "$git_filter")

	for t in $tags; do
		if [ "$(get_version_by_git_tag $t)" == "$version" ]; then
			echo $t
			exit 0
		fi
	done
)

get_upstream_version() (
	local source_type=$1
	local upstream_version

	# What kind of source type do we have?
	if [[ "$source_type" = "git+"* ]]; then
		latest_tag=$(get_latest_git_tag)
		upstream_version="$(get_version_by_git_tag $latest_tag)-0"
	else
		upstream_version=$(dpkg-parsechangelog --show-field Version)
	fi

	echo $upstream_version
)

get_version() (
	local version=$PACKAGE_VERSION

	# If version is undefined, let's simply use
	# the version of the upstream package and add 
	# the git tag to it.
	if [ -z $version ]; then
		commit_hash=$(git -C /input rev-parse HEAD)
		package_version=$(get_upstream_version $source)

		# No version has been provided. Check if there is already a Garden Linux version 0
		# if not, the current package will be the first one. Otherwise, simply use the commit hash.
		if (git -C /input rev-parse --abbrev-ref HEAD | grep -qv "main") || (git -C /input tag | grep -q "gardenlinux/${package_version}gardenlinux0"); then
			version="${package_version}gardenlinux~${commit_hash}"
		else
			version="${package_version}gardenlinux0"
		fi
	fi

	# Print the version accordingly
	echo $version
)

get_files() (
	awk '!/^ / { flag=0 } flag { print $NF } /^Files:/ { flag=1 }'
)

main "$@"
